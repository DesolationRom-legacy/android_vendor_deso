#!/bin/bash
#
# Squish a CM otapackage for distribution
#
# cyanogen
# AOKP

. $ANDROID_BUILD_TOP/vendor/plain/tools/colors

OUT_TARGET_HOST=`uname -a | grep Darwin`
if [ -z "$OUT_TARGET_HOST" ]
then
   OUT_TARGET_HOST=linux-x86
   MD5=md5sum
   XARGS="xargs --max-args=1 --max-procs `grep 'processor' /proc/cpuinfo|wc -l`"
   SED=sed
else
   OUT_TARGET_HOST=darwin-x86
   MD5="md5 -r "
   XARGS="xargs -n 1 -P `sysctl hw.ncpu | awk '{print $2}'`"
   SED=gsed
fi

if [ -z "$OUT" -o ! -d "$OUT" ]; then
	echo -e "ERROR: $0 only works with a full build environment. $OUT should exist."
	exit 1
fi

# out/ dir defined elsewhere
if [ ! -z $OUT_DIR_COMMON_BASE ]; then
	TREE_NAME=`basename $ANDROID_BUILD_TOP`
	OUT_DIR=$OUT_DIR_COMMON_BASE/$TREE_NAME
else
	OUT_DIR=$ANDROID_BUILD_TOP/out
fi

#if [ "$TARGET_BUILD_TYPE" = "debug" ]; then
#    OTAPACKAGE=$OUT/${TARGET_PRODUCT}_debug-ota-$TARGET_BUILD_VARIANT.$USER.zip
#elif [ "$TARGET_BUILD_VARIANT" = "userdebug" ]; then
    OTAPACKAGE=$OUT/$TARGET_PRODUCT-ota-eng.$USER.zip
#else
#    OTAPACKAGE=$OUT/$TARGET_PRODUCT-ota-$TARGET_BUILD_VARIANT.$USER.zip
#fi
if [ ! -f "$OTAPACKAGE" ]; then
	echo -e "$OTAPACKAGE doesn't exist!";
	exit 1
fi

OPTICHARGER=$ANDROID_BUILD_TOP/vendor/plain/tools/opticharger
QUIET=-q
DELETE_BINS="applypatch applypatch_static check_prereq recovery updater"


# Some products want a squashfs for xbin for space
case "$TARGET_PRODUCT" in
	cyanogen_dream_sapphire) WANT_SQUASHFS=1 ;;
	*) WANT_SQUASHFS=0 ;;
esac

if [ "$WANT_SQUASHFS" -eq 1 ]; then
	fatal=0
	MKSQUASHFS_VER_REQ=4
	if type mksquashfs >/dev/null 2>&1; then
		if mksquashfs -version | grep -q "version $MKSQUASHFS_VER_REQ"; then :; else
			echo -e
			echo -e $CL_RED"ERROR: mksquashfs must be at least version $MKSQUASHFS_VER_REQ for this build."$CL_RST
			fatal=1
		fi
	else
		echo -e
		echo -e $CL_RED"ERROR: $TARGET_PRODUCT requires mksquashfs."$CL_RST
		fatal=1
	fi

	if [ "$fatal" -ne 0 ]; then
		echo -e
		echo -e $CL_YLW"       Unoptimized package is still available at"
		echo -e "         $OTAPACKAGE"$CL_RST
		exit $fatal
	fi
fi

REPACK=$OUT/repack.d
echo -e $CL_CYN"Sanitizing environment..."$CL_RST
rm -rf $REPACK
mkdir -p $REPACK
echo -e


# Unpack the otapackage and opticharge all apks
mkdir $REPACK/ota
(
cd $REPACK/ota
echo -e $CL_CYN"Unpacking $OTAPACKAGE..."$CL_RST
unzip $QUIET $OTAPACKAGE
echo -e

)

# Determine what to name the new signed package

MODVERSION=`sed -n -e'/ro\.modversion/s/^.*=//p' $OUT/system/build.prop`-`sed -n -e'/ro\.plain\.version/s/^.*=//p' $OUT/system/build.prop`-`sed -n -e'/rom\.buildtype/s/^.*=//p' $OUT/system/build.prop` 
if [ -n "$BUILDTYPE_RELEASE" ]
then
MODVERSION=Release-`sed -n -e'/ro\.plain\.version/s/^.*=//p' $OUT/system/build.prop`
fi
TARGET_PRODUCT_FINAL=`echo -e $TARGET_PRODUCT | cut -d '_' -f2`
echo -e $CL_CYN"MODVERSION: $MODVERSION"$CL_RST
OUTFILE=$OUT/$MODVERSION.zip

# Pack it up and sign
printf "Zipping package..."
( cd $REPACK/ota; zip $QUIET -r $REPACK/update.zip . )

echo
echo -e $CL_CYN"Signing package..."$CL_RST
SECURITYDIR=$ANDROID_BUILD_TOP/build/target/product/security
java -Xmx1024m \
        -jar $OUT/../../../host/$OUT_TARGET_HOST/framework/signapk.jar \
        -w $SECURITYDIR/testkey.x509.pem $SECURITYDIR/testkey.pk8 \
        $REPACK/update.zip $OUTFILE
echo -e
printf "Cleaning up..."
rm -rf $REPACK
echo -e

# Create a md5 checksum image of the repacked package
(
img=`basename $OUTFILE`
cd `dirname $OUTFILE`
$MD5 $img >$img.md5
echo -e
echo -e $CL_GRN"Package complete: $OUTFILE"$CL_RST
echo -e $CL_GRN"md5: $(cat $img.md5 | awk '{ print $1 }')"$CL_RST
echo -e
)

exit 0
